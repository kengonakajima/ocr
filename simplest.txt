# 最も素朴なピクセル完全スキャンOCR

## 基本概念

画像内のすべての可能な16×16ピクセル領域を、1ピクセルずつずらしながら完全にスキャンし、各位置で「ここに文字があるか、あるならば何の文字か」を判定する最も素朴な方法。

## 前提条件

- 入力画像: 640×480ピクセル（固定）
- フォント: OCR-B（固定）
- フォントサイズ: 16ピクセル（固定）
- 文字色: 黒（固定）
- 背景色: 白（固定）
- 対応文字: A-Z, a-z, 0-9（62種類）
- 文字の回転: なし
- 文字の変形: なし

## 処理の流れ

### 1. スキャン段階

```
可能なスキャン位置:
- X方向: 0 ~ 624 (640-16+1 = 625通り)
- Y方向: 0 ~ 464 (480-16+1 = 465通り)
- 合計: 625 × 465 = 290,625箇所
```

各位置(x, y)で:
1. 16×16ピクセルのパッチを切り出す
2. このパッチをCNNに入力
3. 63クラス（62文字＋背景）の確率を取得
4. 最も確率の高いクラスとその確信度を記録

### 2. CNN の構造

入力: 16×16×3（RGB）の画像パッチ
出力: 63次元の確率ベクトル

最小構成:
- 畳み込み層: 2-3層
- プーリング層: 1-2層
- 全結合層: 1-2層
- 総パラメータ数: 10万程度

### 3. 推論結果の形式

各スキャン位置での出力:
```
{
  'x': スキャン位置のX座標（0-624）,
  'y': スキャン位置のY座標（0-464）,
  'class': 予測クラス（0-62）,
  'confidence': 確信度（0.0-1.0）
}
```

全290,625箇所の結果を配列に格納。

### 4. 後処理

#### 4.1 しきい値処理
- 背景クラス（62）または確信度が低い（例: 0.5未満）結果を除外
- 文字として検出された位置のみを残す

#### 4.2 重複除去（Non-Maximum Suppression）
同じ文字は周辺の複数位置で検出される問題:
- 文字'A'が位置(100,50)にある場合
- (99,49), (99,50), (100,49), (100,50), (101,49)... など
- 最大16×16=256箇所で同じ文字を検出

解決方法:
1. 近接する検出（距離16ピクセル以内）をグループ化
2. 各グループで最も確信度の高い1つだけを残す
3. 残りは削除

#### 4.3 最終出力
```
[
  {'x': 100, 'y': 50, 'char': 'A', 'confidence': 0.98},
  {'x': 120, 'y': 50, 'char': 'p', 'confidence': 0.95},
  {'x': 136, 'y': 50, 'char': 'p', 'confidence': 0.94},
  ...
]
```

## 計算量

### 1回の推論（1パッチ）
- CNN演算: 約1000万回の乗算
- メモリアクセス: 約1MB
- 時間: 約0.1ミリ秒（GPU使用時）

### 画像全体
- 総演算回数: 290,625 × 1000万 ≈ 3兆回
- 総メモリアクセス: 約300GB
- 処理時間: 約30秒（最適化なし）

## メリット

1. **完全な網羅性**: すべての可能な位置をチェック
2. **ピクセル単位の精度**: 文字位置を正確に特定
3. **実装の単純さ**: アルゴリズムが直感的
4. **並列化容易**: 各位置の処理は独立
5. **汎用性**: 文字数や配置に制限なし

## デメリット

1. **計算量が膨大**: 実用的な速度を得るのが困難
2. **冗長性**: 同じ文字を何百回も処理
3. **メモリ帯域**: データ転送がボトルネック
4. **スケーラビリティ**: 画像が大きくなると指数的に遅くなる

## 最適化の可能性

### バッチ処理
- 1000個のパッチをまとめて処理
- GPU利用効率の向上

### 早期棄却
- 明らかに背景の領域をスキップ
- エッジ検出による前処理

### 階層的処理
- 粗いグリッドで候補領域を特定
- 候補周辺のみ詳細スキャン

### ハードウェア最適化
- INT8量子化
- 専用アクセラレータ

## 実用性の評価

この方法は「理論的には完璧」だが「実用的には非効率」な典型例。
しかし、以下の場合には有効:

1. 精度が最優先の場合
2. 処理時間に制約がない場合
3. 文字配置が完全にランダムな場合
4. 他の高速化手法のベンチマークとして

## 結論

最も素朴で、最も確実で、最も非効率なOCR手法。
あらゆる最適化の出発点として、この方法を理解することは重要。