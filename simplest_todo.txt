# 最も素朴なピクセル完全スキャンOCR - トレーニング手順

## ステップ1: データ構造の理解と確認
- 画像ファイル（640×480）とJSONファイル（文字のバウンディングボックス）の対応を確認
- データ数の確認: 何枚の画像があるか
- 正しさの確認方法: ランダムに5枚の画像を表示し、JSONの座標が正しいか視覚的に確認

## ステップ2: データローダーの作成
- 画像ファイルとJSONファイルを読み込む関数を作成
- 文字ラベルを数値（0-62）にマッピングする辞書を作成
- 正しさの確認方法: 10個のデータを読み込み、画像サイズとラベル数を表示

## ステップ3: パッチ生成機能の実装
- 各文字位置から16×16パッチを切り出す関数を作成
- 背景からもランダムに同数のパッチを生成（クラス62）
- 正しさの確認方法: 生成したパッチを可視化し、文字と背景が正しく抽出されているか確認

## ステップ4: CNNモデルの定義
- 入力: 16×16×3のRGB画像
- 出力: 63クラス（62文字＋背景）の確率
- 最小構成: Conv2D(32) → MaxPool → Conv2D(64) → MaxPool → Flatten → Dense(128) → Dense(63)
- 正しさの確認方法: モデルのサマリーを表示し、パラメータ数が10万程度か確認

## ステップ5: 学習データの準備
- 全画像からパッチを生成し、訓練用とバリデーション用に分割（8:2）
- データのシャッフルと正規化（0-255 → 0-1）
- 正しさの確認方法: データの形状、最小値・最大値、クラス分布を表示

## ステップ6: 学習の実行
- バッチサイズ: 128
- エポック数: 10から開始
- 損失関数: categorical_crossentropy
- 最適化: Adam(lr=0.001)
- 正しさの確認方法: 各エポックで訓練・検証の損失と精度を表示

## ステップ7: 学習曲線の可視化
- エポックごとの訓練・検証の損失と精度をプロット
- 過学習の兆候をチェック
- 正しさの確認方法: グラフが正常に減少/上昇しているか確認

## ステップ8: 推論機能の実装
- 640×480画像を1ピクセルずつスライディングして290,625個のパッチを生成
- 各パッチをモデルに入力し、予測結果を保存
- 正しさの確認方法: 1枚の画像で実行し、処理時間と検出数を表示

## ステップ9: 後処理（NMS）の実装
- 確信度が0.5以上の検出のみを残す
- 16ピクセル以内の重複検出をグループ化
- 各グループで最も確信度の高いものを選択
- 正しさの確認方法: NMS前後の検出数を比較

## ステップ10: 評価の実施
- テスト画像で文字検出を実行
- 検出結果とGround Truthを比較
- 精度（Precision）、再現率（Recall）、F1スコアを計算
- 正しさの確認方法: 各指標が妥当な範囲（F1 > 0.5）にあるか確認

## 各ステップの完了基準
- エラーなく実行できる
- 期待される出力が得られる
- 次のステップに必要なデータ/モデルが準備できている