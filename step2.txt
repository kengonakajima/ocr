# Step 2: 軽量なOCRモデルの実装

Step 1で生成した5000枚の学習データを使用して、MacBook（32GB RAM）で動作する軽量なOCRモデルを実装します。

## 実装内容

### 1. モデルアーキテクチャ
- **バックボーン**: MobileNetV3-Small（軽量で高速）
- **検出ヘッド**: 文字の位置を検出するシンプルな回帰ヘッド
- **認識ヘッド**: 検出された領域から文字を認識する分類ヘッド
- **入力サイズ**: 640x480（固定）
- **対応文字**: A-Z, a-z, 0-9（62クラス）

### 2. 実装手順（各ステップで動作確認）

#### Step 2-1: 環境準備
1. PyTorchをインストール
2. インストール確認スクリプト（test_torch.py）を実行
3. GPUが使えるか確認

#### Step 2-2: データ確認
1. データ読み込みスクリプト（check_data.py）を作成
2. 画像とJSONが正しく対応しているか確認
3. バウンディングボックスを可視化して確認

#### Step 2-3: データローダー実装
1. シンプルなデータローダー（data_loader.py）を実装
2. 1バッチ分のデータを読み込んでサイズを確認
3. データ拡張なしで動作確認

#### Step 2-4: モデル実装（段階的）
1. バックボーンのみ（backbone_test.py）を実装して出力サイズ確認
2. 検出ヘッドを追加（detection_head_test.py）
3. 認識ヘッドを追加（full_model_test.py）
4. 各段階でforward passが通ることを確認

#### Step 2-5: 損失関数とメトリクス
1. 検出損失のみ実装して動作確認
2. 認識損失を追加
3. 評価メトリクス（IoU計算）の動作確認

#### Step 2-6: 学習ループ
1. 1エポックだけの学習スクリプト（train_simple.py）
2. メモリ使用量を確認
3. 損失が減少することを確認

#### Step 2-7: 本格的な学習
1. 完全な学習スクリプト（train.py）
2. 検証セットでの評価を追加
3. モデルの保存と読み込み確認

#### Step 2-8: 推論と可視化
1. 推論スクリプト（inference.py）
2. 結果の可視化
3. 精度評価レポート作成

### 3. 学習設定
- バッチサイズ: 8（メモリ節約のため）
- エポック数: 50
- 学習率: 0.001（コサインアニーリング）
- データ分割: Train 4000枚, Val 500枚, Test 500枚

### 4. 最適化・軽量化
- Mixed Precision Training（FP16）を使用
- グラデーションチェックポイントは使用しない（モデルが小さいため）
- 量子化は後のステップで検討

### 5. 評価指標
- 文字検出: IoU, Precision, Recall
- 文字認識: 文字単位の正答率
- 推論速度: FPS

### 6. 成果物
- 学習済みモデル（.pth）
- 学習ログ・グラフ
- テストセットでの評価結果
- 推論結果の可視化画像

## 制約事項
- メモリ使用量を常に監視し、32GB以内に収める
- 学習は1回のセッションで完了できる時間内（数時間程度）
- コードはシンプルで理解しやすいものにする